(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{329:function(e,r,t){"use strict";t.r(r);var o=t(14),n=Object(o.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"terser-webpack-plugin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#terser-webpack-plugin"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("terser-webpack-plugin"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("webpack JS 文件混淆插件")]),e._v(" "),r("ul",[r("li",[e._v("使用 ["),r("code",[e._v("schema-utils")]),e._v("] 做 option 验证")]),e._v(" "),r("li",[e._v("在 "),r("code",[e._v("compilation.hooks.optimizeChunkAssets")]),e._v(" 钩子做混淆操作")]),e._v(" "),r("li",[e._v("使用 "),r("a",{attrs:{href:"https://github.com/facebook/jest",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("jest-worker")]),r("OutboundLink")],1),e._v(" 做多线程执行混淆任务\n"),r("ul",[r("li",[e._v("子 worker 数量最大为系统 cpu 个数减一")]),e._v(" "),r("li",[e._v("在主线程中判断缓存，有缓存直接取缓存结果")]),e._v(" "),r("li",[e._v("无缓存再使用 worker 运行，之后在主线程将结果缓存下来")])])]),e._v(" "),r("li",[e._v("使用 "),r("a",{attrs:{href:"https://github.com/terser-js/terser",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("terser")]),r("OutboundLink")],1),e._v(" 对js文件做混淆\n"),r("ul",[r("li",[e._v("保留必要的注释，如 "),r("code",[e._v("/@preserve|@lic|@cc_on|^\\**!/i")])])])]),e._v(" "),r("li",[e._v("webpack4中，使用 "),r("a",{attrs:{href:"https://github.com/npm/cacache",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("cacache")]),r("OutboundLink")],1),e._v(" 做 key-content 的持久化缓存")]),e._v(" "),r("li",[e._v("webpack5中，使用 "),r("code",[e._v("compilation.cache")]),e._v(" 做缓存")])])])}),[],!1,null,null,null);r.default=n.exports}}]);